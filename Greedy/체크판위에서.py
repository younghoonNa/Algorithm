'''
R * C 크기인 직사각형의 각 칸이 W, B로 표현되어 있습니다. W는 하얀색으로, B는 검은색으로 칸이 채워져 있는것을 뜻합니다.
왼쪽 상단에서 출발하여 우측 하단으로 이동할 때, 특정 룰을 만족하면서 이동에 성공할 수 있는 경우의 수를 구하는 프로그램을 작성해보세요. 아래가 특정 룰입니다.

이동은 항상 점프를 통해서만 가능합니다. 또, 점프 진행시 항상 현재 위치에 적혀있는 색과, 
점프한 이후의 칸에 적혀있는 색이 달라야만 합니다.

점프 진행시 현재 위치에서 적어도 한칸 이상 오른쪽에 있는 위치이며 동시에 
현재 위치에서 적어도 한칸 이상 아래쪽에 있는 위치인 곳으로만 점프가 가능합니다.

정확히 시작, 도착 지점을 제외하고 점프하며 도달한 위치가 정확히 2곳 뿐이어야 합니다.
'''

# 1. 시자검의 경우는 0,0
# 2. 두번째 좌표과 첫번쨰 시작 좌표는 달라야 하므로 
# 3. 두번째 좌표와 세번째 좌표도 마찬가지로 달라야 함.
# 세번째 좌표는 r1 + 1 부터 R-1까지인데 그 이유는 마지막에 들어가기 전 좌표는 건드리면 안되고, 
# r1보다는 오른쪽과 하단에 위치해야하기 때문이다.
# 마지막 좌표는 R-1 C-1이므로 if문을 적어주면 된다.


R, C = map(int, input().split())

arr = [
    input().split()
    for _ in range(R)
]

cnt = 0
for r1 in range(1, R):
    for c1 in range(1,C):

        for r2 in range(r1+1, R-1):
            for c2 in range(c1 + 1, C-1):
                if arr[0][0] != arr[r1][c1] and \
                    arr[r1][c1] != arr[r2][c2] and \
                    arr[r2][c2] != arr[R-1][C-1]:
                    cnt+=1

print(cnt)
